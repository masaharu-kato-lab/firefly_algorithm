"""
Define global variables for the overall system
"""

import math
import numpy as np


# MODE = 0

# Select different MODE of launching
# 0 creating route with pickle dictionary / create the Json file
# 1 creating route manually / create the Json file
# 2 creating a new pickle dictionary
# 3 showing map with checkpoint

# DIC_NAME = "pickles/ways.pickle" #Location of dictionary

CHECKPOINT_ORDERED = [(91, 150), (18, 158), (63, 162), (48, 147), (37, 172), (52, 180), (78, 168), (90, 183), (127, 185), (135, 157), (162, 157), (247, 185), (277, 160), (270, 100), (255, 80), (276, 45), (255, 120), (163, 111), (177, 128), (138, 130), (247, 40), (180, 18), (168, 57), (154, 75), (135, 97), (97, 135), (34, 91), (25, 130), (97, 55), (127, 55), (127, 25), (21, 10), (60, 10)]
# ROUTE = [(91, 150), (18, 158), (63, 162), (48, 147), (37, 172), (52, 180), (78, 168), (90, 183), (127, 185), (135, 157), (162, 157), (247, 185), (277, 160), (270, 100), (255, 80), (276, 45), (255, 120), (163, 111), (177, 128), (138, 130), (247, 40), (180, 18), (168, 57), (154, 75), (135, 97), (97, 135), (34, 91), (25, 130), (97, 55), (127, 55), (127, 25), (21, 10), (60, 10)]

SPEED = 5 #m/s
BATTERY_LIMIT = 20 #min
BATTERY_LIMIT_SEC = BATTERY_LIMIT*60

#CHECKPOINT_ORDERED = [(91, 150), (18, 158), (63, 162)]
#ROUTE = [(91, 150), (18, 158), (63, 162)]

def realDistance(point1, point2):
	a = (point1.point[0] - point2.point[0])
	b = (point1.point[1] - point2.point[1])
	return np.sqrt(a*a + b*b)

def getTime(distance, speed):
	return(distance / speed)

def square(a):
	return a*a



#Value

CELLS_L = 4
CELLS_l = 4



#ANGLE

ANGLE_45 = 0.925024503554700006
RADIUS_45 = 5.0

ANGLE_90_1 = 2.0
RADIUS_90_1 = (math.pi)/2.0
ANGLE_90_2 = 1.850049007109400012
RADIUS_90_2 = 2.5

ANGLE_135_1 = 1.082104136233799974
RADIUS_135_1 = 0.935762731431
ANGLE_135_2 = 4.4156830075347004438
RADIUS_135_2 = 1.27401600006885
ANGLE_135_3 = 0.9948376736342999793
RADIUS_135_3 = 2.0869371384069

ANGLE_180_1 = 0.92502450355470000609
RADIUS_180_1 = 0.4764172839426
ANGLE_180_2 = 5.8119464091267003525
RADIUS_180_2 =1.5805969614532
ANGLE_180_3 = 0.8726646259950000539
RADIUS_180_3 = 0.4764172839426
ANGLE_180_4 = 1.047197551193999931
RADIUS_180_4 = 1.3776081098166
ANGLE_180_5 = 5.37561409612920027
RADIUS_180_5 = 1.8490688493466
ANGLE_180_6 = 1.064650843713899953
RADIUS_180_6 = 1.4214167864489


LENGTH_0_1 = 4
LENGTH_0_2 = 4*np.sqrt(2)

LENGTH_45 = RADIUS_45 * ANGLE_45
LENGTH_90_1 = RADIUS_90_1*ANGLE_90_1
LENGTH_90_2 = RADIUS_90_2*ANGLE_90_2
LENGTH_135 = RADIUS_135_1*ANGLE_135_1 + RADIUS_135_2*ANGLE_135_2 + RADIUS_135_3*ANGLE_135_3
LENGTH_180_1 = RADIUS_180_1*ANGLE_180_1 + RADIUS_180_2*ANGLE_180_2 + RADIUS_180_3*ANGLE_180_3
LENGTH_180_2 = RADIUS_180_5*ANGLE_180_5 + RADIUS_180_4*ANGLE_180_4 + RADIUS_180_6*ANGLE_180_6


ADAPTIVE_45 = LENGTH_45 + (SPEED*SPEED)/(2*RADIUS_45)*square(getTime(LENGTH_45,SPEED))

ADAPTIVE_90_1 = LENGTH_90_1 + (SPEED*SPEED)/(2*RADIUS_90_1)*square(getTime(LENGTH_90_1,SPEED))

ADAPTIVE_90_2 = LENGTH_90_2 + (SPEED*SPEED)/(2*RADIUS_90_2)*square(getTime(LENGTH_90_2,SPEED))

ADAPTIVE_135 = LENGTH_135 + (SPEED*SPEED)/(2*RADIUS_135_1)*square(getTime(RADIUS_135_1*ANGLE_135_1,SPEED)) + (SPEED*SPEED)/(2*RADIUS_135_2)*square(getTime(RADIUS_135_2*ANGLE_135_2,SPEED)) + (SPEED*SPEED)/(2*RADIUS_135_3)*square(getTime(RADIUS_135_3*ANGLE_135_3,SPEED))

ADAPTIVE_180_1 = LENGTH_180_1 + (SPEED*SPEED)/(2*RADIUS_180_1)*square(getTime(RADIUS_180_1*ANGLE_180_2,SPEED)) + (SPEED*SPEED)/(2*RADIUS_180_2)*square(getTime(RADIUS_180_2*ANGLE_180_2,SPEED)) + (SPEED*SPEED)/(2*RADIUS_180_3)*square(getTime(RADIUS_180_3*ANGLE_180_3,SPEED))

ADAPTIVE_180_2 = LENGTH_180_2 + (SPEED*SPEED)/(2*RADIUS_180_4)*square(getTime(RADIUS_180_4*ANGLE_180_4,SPEED)) + (SPEED*SPEED)/(2*RADIUS_180_5)*square(getTime(RADIUS_180_5*ANGLE_180_5,SPEED)) + (SPEED*SPEED)/(2*RADIUS_180_6)*square(getTime(RADIUS_180_6*ANGLE_180_6,SPEED))
